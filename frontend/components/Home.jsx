// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useEffect, useState } from "react";

import Header from "./Header";
import ProductCard from "./ProductCard";
import SearchInputComponent from "./SearchInputComponent";
import PlasmicHome from "./plasmic/canvas_app_explorer/PlasmicHome";
import "../css/Home.css";

function Home_(props, ref) {
  // Use PlasmicHome to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicHome are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, we are just piping all HomeProps here, but feel free
  // to do whatever works for you.

  //const [addedTools, setAddedTools] = useState([]); // each tool has one entry in array, for add/remove
  const [APIData, setAPIData] = useState(null); // holds the data read from API
  const [tools, setTools] = useState(null); // to display the tools

  // For search filter
  const [searchFilter, setSearchFilter] = useState("");

  // Only called once, since [] means no dependencies 
  useEffect(async () => {
    const url = "/api/lti_tools/";
    const response = await fetch(url);
    const data = await response.json();
      // sort data alphabetically by name
    data.sort((a,b) => (a.name.toLowerCase() > b.name.toLowerCase()) ? 1 : ((b.name.toLowerCase() > a.name.toLowerCase()) ? -1 : 0))

    setAPIData(data) // for use with search filter
    setTools(data) // what will be displayed
    //setAddedTools(Array(Object.keys(data).length + 2).fill(false)) // don't need for add/remove
  }, []);

  // Called every time searchFilter changes, makes sure action is performed after state changes
  useEffect(() => {
    console.log(searchFilter)
    // Show filtered data if search is entered, else show all data
    if (searchFilter == "") {
      console.log("WE SHOULD GO IN HERE, show all data")
      setTools(APIData)
    }
    else {
      console.log("FILTERING DATA");
      const filteredData = APIData.filter((item) => (item.name.toLowerCase().includes(searchFilter.toLowerCase()) || item.short_description.toLowerCase().includes(searchFilter.toLowerCase())))
      setTools(filteredData)
      console.log(filteredData)
    }
  }, [searchFilter])

  // -----------------------ADD/REMOVE BUTTON FUNCTIONALITY CODE---------------------------
  // const addRemoveBlock = (
  // addRemoveSlot={(
  //     <div>
  //         {addedTools[tool.id] === false ?
  //             <AddRemoveButton
  //                 onClick={(e) => {
  //                     console.log(HELLOOO)
  //                     e.preventDefault();
  //                     let addedToolsCopy = [...addedTools]
  //                     addedToolsCopy[tool.id] = !addedToolsCopy[tool.id]
  //                     setAddedTools(addedToolsCopy)
  //                 }}
  //             />
  //         :
  //             <AddRemoveButton
  //                 onClick={(e) => {
  //                     console.log(YOOOOOOOOO)
  //                     e.preventDefault();
  //                     let addedToolsCopy = [...addedTools]
  //                     addedToolsCopy[tool.id] = !addedToolsCopy[tool.id]
  //                     setAddedTools(addedToolsCopy)
  //                 }}
  //                 removeToolFromSite={true}
  //             />
  //         }
  //     </div>
  // )}
  // )

  const header = (
    <Header
      withSearchBar={true}
      searchInputSlot={
        <SearchInputComponent
          withSearchBar={true} // without this, search bar won't show up in SearchInputComponent
          placeholder="Filter by name..."
          value={searchFilter} // updates what is displayed with what user inputs
          onChange={(e) => setSearchFilter(e.target.value)} // set search filter to input value
        />
      }
    />
  )

  const productCardContainer = tools === null
    ? <div>Loading . . . </div>
    : <>{tools.map(tool => <div key={tool.id}><ProductCard tool={tool} /></div>)}</>

  return <PlasmicHome root={{ ref }} {...{ header, productCardContainer }} />;
}

const Home = React.forwardRef(Home_);

export default Home;
